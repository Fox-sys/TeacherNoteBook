# Generated by Django 3.2 on 2021-04-12 15:35

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'Учитель',
                'verbose_name_plural': 'Учителя',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Расписание',
                'verbose_name_plural': 'Расписания',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50, verbose_name='Имя')),
                ('last_name', models.CharField(max_length=50, verbose_name='Фамилия')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('schedule', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='notebook.schedule')),
            ],
        ),
        migrations.CreateModel(
            name='ScheduleLesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=150, verbose_name='Предмет')),
                ('start_time', models.TimeField(verbose_name='Начало урока')),
                ('end_time', models.TimeField(verbose_name='Конец урока')),
                ('price', models.PositiveSmallIntegerField(verbose_name='Цена')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='notebook.student')),
            ],
        ),
        migrations.AddField(
            model_name='schedule',
            name='friday',
            field=models.ManyToManyField(blank=True, related_name='Пятница', to='notebook.ScheduleLesson'),
        ),
        migrations.AddField(
            model_name='schedule',
            name='monday',
            field=models.ManyToManyField(blank=True, related_name='Понедельник', to='notebook.ScheduleLesson'),
        ),
        migrations.AddField(
            model_name='schedule',
            name='saturday',
            field=models.ManyToManyField(blank=True, related_name='Суббота', to='notebook.ScheduleLesson'),
        ),
        migrations.AddField(
            model_name='schedule',
            name='sunday',
            field=models.ManyToManyField(blank=True, related_name='Воскресенье', to='notebook.ScheduleLesson'),
        ),
        migrations.AddField(
            model_name='schedule',
            name='thursday',
            field=models.ManyToManyField(blank=True, related_name='Четверг', to='notebook.ScheduleLesson'),
        ),
        migrations.AddField(
            model_name='schedule',
            name='tuesday',
            field=models.ManyToManyField(blank=True, related_name='Вторник', to='notebook.ScheduleLesson'),
        ),
        migrations.AddField(
            model_name='schedule',
            name='wednesday',
            field=models.ManyToManyField(blank=True, related_name='Среда', to='notebook.ScheduleLesson'),
        ),
        migrations.CreateModel(
            name='PassedLessons',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('schedule_lesson', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='notebook.schedulelesson')),
            ],
        ),
        migrations.AddField(
            model_name='teacher',
            name='passed_lessons',
            field=models.ManyToManyField(blank=True, related_name='прошедшие_уроки', to='notebook.PassedLessons'),
        ),
        migrations.AddField(
            model_name='teacher',
            name='schedule',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='notebook.schedule'),
        ),
        migrations.AddField(
            model_name='teacher',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
